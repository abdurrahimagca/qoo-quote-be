services:
  traefik:
    image: traefik:v2.9
    container_name: qoo-quote-traefik
    command:
      - '--api.insecure=true'
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      - '--entrypoints.web.address=:80'
      - '--log.level=DEBUG'
      - '--accesslog=true'
      - '--providers.docker.network=qoo-quote-network'
    ports:
      - '80:80'
      - '8080:8080'
    networks:
      - qoo-quote-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  api:
    image: qoo-quote-api:latest
    build:
      context: .
      dockerfile: Dockerfile
    container_name: qoo-quote-api
    expose:
      - 3000
    env_file:
      - .env.development
    networks:
      - qoo-quote-network
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        while ! nc -z database 5432; do sleep 1; done &&
        echo 'Database is ready!' &&
        pnpm run start:dev
      "
    volumes:
      - .:/app
    restart: always
    depends_on:
      database:
        condition: service_healthy
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.api.rule=Host(`local.qq.api.com`)'
      - 'traefik.http.services.api.loadbalancer.server.port=3000'

  database:
    image: postgres:13-alpine
    container_name: qoo-quote-database
    env_file:
      - .env.development
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - '5433:5432'
    volumes:
      - qoo-quote-database:/var/lib/postgresql/data
    networks:
      - qoo-quote-network
    restart: always
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  qoo-quote-database:
    name: qoo-quote-database

networks:
  qoo-quote-network:
    name: qoo-quote-network
    external: true
